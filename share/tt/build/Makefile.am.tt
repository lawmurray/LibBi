[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%
# client programs
CLIENTS = [
    'nm',
    'filter',
    'sample',
    'test',
    'test_resampler',
    'test_filter'
];
%]

AUTOMAKE_OPTIONS = subdir-objects

# compile and link flags
AM_CPPFLAGS = -Isrc $(OPENMP_CPPFLAGS)
AM_CXXFLAGS = $(OPENMP_CXXFLAGS)
AM_LDFLAGS = $(OPENMP_LDFLAGS)

# CUDA files setup
NVCPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS) $(DEFS) -DBOOST_NOINLINE
NVCXXFLAGS = -w -arch sm_20 -Xcompiler="$(AM_CXXFLAGS) $(CXXFLAGS)"
LINK = $(CXXLINK) # force C++ linker for CUDA files

# libraries
lib_LIBRARIES = libbi.a
libbi_a_SOURCES = \
  src/bi/bi.cpp \
  src/bi/netcdf/KalmanFilterNetCDFBuffer.cpp \
  src/bi/netcdf/netcdf.cpp \
  src/bi/netcdf/NetCDFBuffer.cpp \
  src/bi/netcdf/OptimiserNetCDFBuffer.cpp \
  src/bi/netcdf/ParticleFilterNetCDFBuffer.cpp \
  src/bi/netcdf/MCMCNetCDFBuffer.cpp \
  src/bi/netcdf/SMCNetCDFBuffer.cpp \
  src/bi/netcdf/SimulatorNetCDFBuffer.cpp \
  src/bi/netcdf/InputNetCDFBuffer.cpp \
  src/bi/null/InputNullBuffer.cpp \
  src/bi/null/KalmanFilterNullBuffer.cpp \
  src/bi/null/MCMCNullBuffer.cpp \
  src/bi/null/OptimiserNullBuffer.cpp \
  src/bi/null/ParticleFilterNullBuffer.cpp \
  src/bi/null/SimulatorNullBuffer.cpp \
  src/bi/null/SMCNullBuffer.cpp \
  src/bi/cache/Cache.cpp \
  src/bi/host/math/cblas.cpp \
  src/bi/host/math/lapack.cpp \
  src/bi/host/math/qrupdate.cpp \
  src/bi/host/ode/IntegratorConstants.cpp \
  src/bi/host/random/RandomHost.cpp \
  src/bi/misc/omp.cpp \
  src/bi/mpi/mpi.cpp \
  src/bi/random/Random.cpp \
  src/bi/resampler/MetropolisResampler.cpp \
  src/bi/resampler/MultinomialResampler.cpp \
  src/bi/resampler/RejectionResampler.cpp \
  src/bi/resampler/Resampler.cpp \
  src/bi/resampler/StratifiedResampler.cpp \
  src/bi/resampler/SystematicResampler.cpp

if ENABLE_SSE
libbi_a_SOURCES += 
endif

if ENABLE_CUDA
libbi_a_SOURCES += \
  src/bi/cuda/device.cu \
  src/bi/cuda/math/magma.cu \
  src/bi/cuda/math/cublas.cu \
  src/bi/cuda/random/RandomGPU.cu \
  src/bi/cuda/random/RandomKernel.cu
endif

#if ENABLE_MPI
#libbi_a_SOURCES += 
#endif

# programs
bin_PROGRAMS =[% FOREACH client IN CLIENTS %] [% client %]_cpu [% client %]_gpu[% END %]

[% FOREACH client IN CLIENTS %]
[% client %]_cpu_LDADD = $(DEPS_LIBS) libbi.a
[% client %]_cpu_SOURCES = src/[% client %]_cpu.cpp[% IF have_model %] src/model/Model[% model.get_name %].cpp[% END %]
[% client %]_gpu_LDADD = $(DEPS_LIBS) libbi.a
[% client %]_gpu_SOURCES = src/[% client %]_gpu.cu[% IF have_model %]  src/model/Model[% model.get_name %].cpp[% END %]
[% END %]

# other
dist_noinst_SCRIPTS = autogen.sh

# command line options
if ENABLE_SINGLE
CPPFLAGS += -DENABLE_SINGLE
endif

if ENABLE_CUDA
CPPFLAGS += -DENABLE_CUDA
# ensure dependency files included
[%-FOREACH client IN CLIENTS %]
include src/$(DEPDIR)/[% client %]_gpu.Po
[% END %]
endif

if ENABLE_GPU_CACHE
CPPFLAGS += -DENABLE_GPU_CACHE
endif

if ENABLE_AVX
CPPFLAGS += -DENABLE_AVX
CXXFLAGS += -mavx
endif

if ENABLE_SSE
CPPFLAGS += -DENABLE_SSE
CXXFLAGS += -msse3
endif

if ENABLE_OPENMP
CPPFLAGS += -DENABLE_OPENMP
endif

if ENABLE_MPI
CPPFLAGS += -DENABLE_MPI
endif

if ENABLE_VAMPIR
CPPFLAGS += -DENABLE_VAMPIR -DVTRACE
endif

if ENABLE_TIMING
CPPFLAGS += -DENABLE_TIMING
endif

if ENABLE_DIAGNOSTICS
CPPFLAGS += -DENABLE_DIAGNOSTICS
endif

if ENABLE_GPERFTOOLS
CPPFLAGS += -DENABLE_GPERFTOOLS
endif

# suffix rules for CUDA files
.cu.o:
	depbase=`echo $@ | sed 's|[^/]*$$|.deps/&|;s|\.o$$||'` && \
	srcbase=`echo $@ | sed 's|/[^/]*$$||'` && \
	perl nvcc_wrapper.pl $(NVCC) -M $(NVCXXFLAGS) $(NVCPPFLAGS) -odir $$srcbase -o $$depbase.Tpo $< && \
	perl nvcc_wrapper.pl $(NVCC) -c $(NVCXXFLAGS) $(NVCPPFLAGS) -o $@ $< && \
	cat $$depbase.Tpo > $$depbase.Po && \
	rm -f $$depbase.Tpo

.cu.lo:
	depbase=`echo $@ | sed 's|[^/]*$$|.deps/&|;s|\.lo$$||'` && \
	srcbase=`echo $@ | sed 's|/[^/]*$$||'` && \
	perl nvcc_wrapper.pl $(NVCC) -M $(NVCXXFLAGS) $(NVCPPFLAGS) -odir $$srcbase -o $$depbase.Tpo $< && \
	$(LIBTOOL) --tag=CC --mode=compile perl nvcc_wrapper.pl $(NVCC) -c $(NVCXXFLAGS) $(NVCPPFLAGS) -o $@ $< && \
	cat $$depbase.Tpo > $$depbase.Plo && \
	rm -f $$depbase.Tpo
