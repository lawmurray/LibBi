[%-
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
-%]
[%-MACRO fetch_parents(action) BLOCK %]
  [%-IF action.get_all_const_refs.size > 0 %]
  /* constants */
  [% FOREACH ref IN action.get_all_const_refs %]
  const BOOST_AUTO([% ref.to_cpp %], [% ref.get_const.get_expr.to_cpp %]);
  [%-END-%]
  [%-END %]
  
  /* variables */
  [% FOREACH ref IN action.get_all_var_refs %]
  [% IF action.is_matrix %]
  [% IF ref.get_indexes.size == 0 %]
  [%# matrix actions handle their own parents, but may need some scalars for ranges %]
  const BOOST_AUTO([% ref.to_cpp %], pax.template fetch<Var[% ref.get_var.get_id %]>(s, p, 0));
  [% END %]
  [% ELSIF ref.get_indexes.size > 0 %]
  const VarCoord[% ref.get_var.get_id %] cox[% loop.index %](
  [%-un = 0-%]
  [%-FOREACH index IN ref.get_indexes-%]
  [%-IF index.is_index-%]
  [%-index.get_expr.to_cpp-%]
  [%-ELSE-%]
  un[% un; un = un + 1 %]
  [%-END-%]
  [%-',' UNLESS loop.last-%]
  [%-END-%]);
  const BOOST_AUTO([% ref.to_cpp %], pax.template fetch<Var[% ref.get_var.get_id %]>(s, p, cox[% loop.index %].index()));
  [% ELSIF ref.get_var.get_shape.get_count > 0 %]
  const VarCoord[% ref.get_var.get_id %] cox[% loop.index %](cox.index());
  const BOOST_AUTO([% ref.to_cpp %], pax.template fetch<Var[% ref.get_var.get_id %]>(s, p, cox[% loop.index %].index()));
  [% ELSE %]
  const BOOST_AUTO([% ref.to_cpp %], pax.template fetch<Var[% ref.get_var.get_id %]>(s, p, 0));
  [%-END-%]
  [%-END-%]

  /* inlines */
  [% FOREACH ref IN action.get_all_inline_refs %]
  const BOOST_AUTO([% ref.to_cpp %], [% ref.get_inline.get_expr.to_cpp %]);
  [%-END-%]
[%-END %]
