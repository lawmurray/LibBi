[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-
lower = action.get_named_arg('lower');
upper = action.get_named_arg('upper');
range = action.make_range;
%]

[%-PROCESS action/misc/header.hpp.tt-%]

/**
 * Action: [% action.get_name %].
 */
class [% class_name %] {
public:
  [% std_action %]
    
  [% declare_action_static_function('simulate') %]
  [% declare_action_static_function('sample') %]
  [% declare_action_static_function('logdensity') %]
  [% declare_action_static_function('maxlogdensity') %]
};

#include "bi/math/pi.hpp"

[% std_action_static_function('simulate') %]

[% sig_action_static_function('sample') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real mn = [% lower.to_cpp %];
  real mx = [% upper.to_cpp %];
  real u = rng.uniform(mn, mx);
    
  [% put_output(action, 'u') %]
}

[% sig_action_static_function('logdensity') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real mn = [% lower.to_cpp %];
  real mx = [% upper.to_cpp %];
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  if (xy >= mn && xy <= mx) {
    lp += -bi::log(mx - mn);
  } else {
    lp = -std::numeric_limits<real>::infinity();
  }
  [% put_output(action, 'xy') %]
}

[% sig_action_static_function('maxlogdensity') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());
  
  [% IF range.is_common %]
  real rn = [% range.to_cpp %];
  lp += -bi::log(rn);
  [% ELSE %]
  lp = std::numeric_limits<real>::infinity();
  [% END %]

  [% put_output(action, 'xy') %]
}

[%-PROCESS action/misc/footer.hpp.tt-%]
