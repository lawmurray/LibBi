[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev: 3738 $
## $Date: 2013-04-16 23:24:15 +1000 (Tue, 16 Apr 2013) $
%]

[% PROCESS macro.hpp.tt %]

[%-class_name = 'ActionCoord' _ action.get_id-%]
/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev: 3738 $
 * $Date: 2013-04-16 23:24:15 +1000 (Tue, 16 Apr 2013) $
 */
#ifndef LIBBI_[% class_name | upper %]_HPP
#define LIBBI_[% class_name | upper %]_HPP

/**
 * Action coordinate: [% action.get_id %].
 *
 * An action coordinate behaves like a variable coordinate, but over only a
 * subrange of the target variable's dimensions. When setting the serial
 * index, a serial index within the subrange is given. When getting the
 * serial index, a serial index within the whole range of the variable is
 * returned.
 */
class [% class_name %] {
public:
  /**
   * Default constructor.
   */
  CUDA_FUNC_BOTH [% class_name %]();

  /**
   * Construct from serial index.
   *
   * @param ix Serial index within the subrange.
   */
  CUDA_FUNC_BOTH [% class_name %](const int ix);

  /**
   * Increment to next coordinate in serial ordering.
   */
  CUDA_FUNC_BOTH void inc();
   
  /**
   * Decrement to previous coordinate in serial ordering.
   */
  CUDA_FUNC_BOTH void dec();

  /**
   * Recover serial index.
   * 
   * @return Serial index within the whole range.
   */
  CUDA_FUNC_BOTH int index() const;
  
  /**
   * Set serial index.
   *
   * @param ix Serial index within the subrange.
   *
   * Sets the coordinate to be equivalent to the given serial index.
   */
  CUDA_FUNC_BOTH void setIndex(const int ix);

  /**
   * Prefix increment operator.
   */
  CUDA_FUNC_BOTH [% class_name %]& operator++() {
    inc();
    return *this;
  }
  
  /**
   * Postfix increment operator.
   */
  CUDA_FUNC_BOTH [% class_name %] operator++(int) {
    [% class_name %] tmp(*this);
    inc();
    return tmp;
  }
  
  /**
   * Prefix decrement operator.
   */
  CUDA_FUNC_BOTH [% class_name %]& operator--() {
    dec();
    return *this;
  }
  
  /**
   * Postfix decrement operator.
   */
  CUDA_FUNC_BOTH [% class_name %] operator--(int) {
    [% class_name %] tmp(*this);
    dec();
    return tmp;
  }

  [% FOREACH alias IN action.get_aliases %]
  /**
   * Coordinate on dimension.
   */
  int i[% loop.index %];
  [% END %]

  [% FOREACH alias IN action.get_aliases %]
  /**
   * Offset into dimension.
   */
  static const int OFFSET[% loop.index %] = [% IF alias.get_range.get_start.is_const %][% alias.get_range.get_start.eval_const %][% ELSE %]0[% END %];
  
  /**
   * Length along dimension.
   */
  static const int LEN[% loop.index %] = [% alias.get_range.get_size.eval_const %];
  [% END %]

  [% FOREACH dim IN action.get_left.get_var.get_dims %]
  /**
   * Size of dimension.
   */
  static const int N[% loop.index %] = [% dim.get_size %];
  [% END %]
};

inline [% class_name %]::[% class_name %]() {
  [% FOREACH alias IN action.get_aliases %]
  i[% loop.index %] = OFFSET[% loop.index %];
  [% END %]
}

inline [% class_name %]::[% class_name %](const int ix) {
  setIndex(ix);
}

inline void [% class_name %]::inc() {
  [% FOREACH alias IN action.get_aliases %]
  if (i[% loop.index %] < OFFSET[% loop.index %] + LEN[% loop.index %] - 1) {
    ++i[% loop.index %];
  } else {
    i[% loop.index %] = OFFSET[% loop.index %];
  [% END %]
  [% FOREACH alias IN action.get_aliases %]
  }
  [% END %]
}

inline void [% class_name %]::dec() {
  [% FOREACH alias IN action.get_aliases %]
  if (i[% loop.index %] > OFFSET[% loop.index %]) {
    --i[% loop.index %];
  } else {
    i[% loop.index %] = OFFSET[% loop.index %] + LEN[% loop.index %] - 1;
  [% END %]
  [% FOREACH alias IN action.get_aliases %]
  }
  [% END %]
}

inline int [% class_name %]::index() const {
  [% IF action.get_aliases.size == 0 %]
  return 0;
  [% ELSE %]
  [% FOREACH alias IN action.get_aliases %]
  [% IF loop.first %]
  int ix = i[% loop.index %];
  [% IF !loop.last %]
  int len = N[% loop.index %];
  [% END %]
  [% ELSE %]
  ix += i[% loop.index %]*len;
  [% IF !loop.last %]
  len *= N[% loop.index %];
  [% END %]
  [% END %]
  [% END %]

  return ix;
  [% END %]
}

inline void [% class_name %]::setIndex(const int ix) {
  [%-IF action.get_aliases.size > 0 %]
  int j = ix;
  [%-END-%]
  [%-IF action.get_aliases.size > 1 %]
  int rest;
  [%-END-%]
  
  [%-FOREACH alias IN action.get_aliases %]
  [%-IF loop.last-%]
  i[% loop.index %] = OFFSET[% loop.index %] + j;
  [%-ELSE-%]
  rest = j/LEN[% loop.index %];
  i[% loop.index %] = OFFSET[% loop.index %] + j - rest*LEN[% loop.index %];
  j = rest;
  [%-END-%]
  [%-END %]
}

#endif
